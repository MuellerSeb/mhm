# to use the env-var "GIT_CLONE_PATH", set the following in
# ./gitlab-runner/config.toml under [[runners]]:
#   [runners.custom_build_dir]
#     enabled = true
# This will prevent git clone conflicts for jobs ran in parallel

variables:
  GIT_DEPTH: 10
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME

stages:
  - info
  - build
  - check-cases
  - code-analysis
  - doc
  - deploy

show-env-vars:
  stage: info
  variables:
    GIT_STRATEGY: none
    SEP: "##################################################################"
    S00: "commit date - "
    S01: "project: ${CI_PROJECT_PATH}"
    S02: "branch: ${CI_COMMIT_REF_NAME}"
    S03: "commit: ${CI_COMMIT_SHA}"
    S04: "commit msg: ${CI_COMMIT_MESSAGE}"
    S05: "clone base path: "
    S06: "runner token: ${CI_RUNNER_SHORT_TOKEN}"
  script:
    - echo -e "${SEP}\n${S00}$(date)\n${SEP}\n${S01}\n${S02}\n${S03}\n${S04}\n${SEP}\n${S05}${GIT_CLONE_PATH}\n${S06}\n${SEP}"

pybindings:
  stage: build
  variables:
    GIT_DEPTH: 0  # to have all tags
  script:
    - module load Mamba/23.3.1-1
    - mamba create -p ./mhm_env -y python=3.10 pip netcdf-fortran fortran-compiler c-compiler cxx-compiler fypp python-build black isort pytest-cov xarray netCDF4
    - source activate ./mhm_env
    # check source code
    - black --check --diff pybind
    - isort --check --diff pybind
    # create sdist and install it
    - python -m build --sdist --outdir dist .
    - pip install -v .
    # check installation
    - python -c "import mhm; print(mhm.__version__)"
    - python -c "import mhm; print(mhm.f_version)"
    - which mhm
    - mhm --version
    # will always download from main repo (no testing to prevent errors in forks)
    - which mhm-download
    - mhm-download -V
    - mhm-download -h
    - python -m pytest --cov mhm --cov-report term-missing --cov-report html --cov-report xml -v pybind/tests/
    # check editable installation last to not mess with pytest
    - pip install -v -e .
    - rm -rf mhm_env/
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - dist
      - htmlcov

cmake-gfortran102:
  stage: build
  script:
    - source hpc-module-loads/eve.gfortran102
    - source CI-scripts/compile
    - source CI-scripts/compile_debug
    - source CI-scripts/compile_OpenMP
    - source CI-scripts/compile_OpenMP_debug
  artifacts:
    paths:
    - mhm
    - mhm_debug
    - mhm_openmp
    - mhm_openmp_debug

cmake-gfortran102MPI:
  stage: build
  script:
    - source hpc-module-loads/eve.gfortran102MPI
    - source CI-scripts/compile_MPI
    - source CI-scripts/compile_MPI_debug
  artifacts:
    paths:
    - mhm_mpi
    - mhm_mpi_debug

cmake-gfortran122:
  stage: build
  script:
    - source hpc-module-loads/eve.gfortran122
    - source CI-scripts/compile
    - source CI-scripts/compile_debug
    - source CI-scripts/compile_OpenMP
    - source CI-scripts/compile_OpenMP_debug
  artifacts:
    paths:
    - mhm
    - mhm_debug
    - mhm_openmp
    - mhm_openmp_debug

cmake-gfortran122MPI:
  stage: build
  script:
    - source hpc-module-loads/eve.gfortran122MPI
    - source CI-scripts/compile_MPI
    - source CI-scripts/compile_MPI_debug
  artifacts:
    paths:
    - mhm_mpi
    - mhm_mpi_debug

cmake-intel2020b:
  stage: build
  script:
    - source hpc-module-loads/eve.intel2020b
    - source CI-scripts/compile
    - source CI-scripts/compile_debug
    - source CI-scripts/compile_OpenMP
    - source CI-scripts/compile_OpenMP_debug
  artifacts:
    paths:
    - mhm
    - mhm_debug
    - mhm_openmp
    - mhm_openmp_debug

cmake-intel2020bMPI:
  stage: build
  script:
    - source hpc-module-loads/eve.intel2020bMPI
    - source CI-scripts/compile_MPI
    - source CI-scripts/compile_MPI_debug
  artifacts:
    paths:
    - mhm_mpi
    - mhm_mpi_debug

cmake-intel2023b-classic:
  stage: build
  script:
    - source hpc-module-loads/eve.intel2023b-classic
    - source CI-scripts/compile
    - source CI-scripts/compile_debug
    - source CI-scripts/compile_OpenMP
    - source CI-scripts/compile_OpenMP_debug
  artifacts:
    paths:
    - mhm
    - mhm_debug
    - mhm_openmp
    - mhm_openmp_debug

cmake-intel2023bMPI-classic:
  stage: build
  script:
    - source hpc-module-loads/eve.intel2023bMPI-classic
    - source CI-scripts/compile_MPI
    - source CI-scripts/compile_MPI_debug
  artifacts:
    paths:
    - mhm_mpi
    - mhm_mpi_debug

check-gfortran102:
  when: always
  stage: check-cases
  needs:
    - job: cmake-gfortran102
      artifacts: true
  script:
    - source hpc-module-loads/eve.gfortran102
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_debug ../mhm ../mhm_openmp_debug ../mhm_openmp -t 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-gfortran102MPI:
  when: always
  stage: check-cases
  needs:
    - job: cmake-gfortran102MPI
      artifacts: true
  script:
    - source hpc-module-loads/eve.gfortran102MPI
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_mpi_debug ../mhm_mpi -m 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-gfortran122:
  when: always
  stage: check-cases
  needs:
    - job: cmake-gfortran122
      artifacts: true
  script:
    - source hpc-module-loads/eve.gfortran122
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_debug ../mhm ../mhm_openmp_debug ../mhm_openmp -t 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-gfortran122MPI:
  when: always
  stage: check-cases
  needs:
    - job: cmake-gfortran122MPI
      artifacts: true
  script:
    - source hpc-module-loads/eve.gfortran122MPI
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_mpi_debug ../mhm_mpi -m 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-intel2020b:
  when: always
  stage: check-cases
  needs:
    - job: cmake-intel2020b
      artifacts: true
  script:
    - source hpc-module-loads/eve.intel2020b
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_debug ../mhm ../mhm_openmp_debug ../mhm_openmp -t 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-intel2020bMPI:
  when: always
  stage: check-cases
  needs:
    - job: cmake-intel2020bMPI
      artifacts: true
  script:
    - source hpc-module-loads/eve.intel2020bMPI
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_mpi_debug ../mhm_mpi -m 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-intel2023b-classic:
  when: always
  stage: check-cases
  needs:
    - job: cmake-intel2023b-classic
      artifacts: true
  script:
    - source hpc-module-loads/eve.intel2023b-classic
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_debug ../mhm ../mhm_openmp_debug ../mhm_openmp -t 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-intel2023bMPI-classic:
  when: always
  stage: check-cases
  needs:
    - job: cmake-intel2023bMPI-classic
      artifacts: true
  script:
    - source hpc-module-loads/eve.intel2023bMPI-classic
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_mpi_debug ../mhm_mpi -m 4
  artifacts:
    when: always
    paths:
    - check/logs/

unittest-gfortran122:
  when: always
  stage: code-analysis
  needs:
    - job: cmake-gfortran122
  script:
    # we need pfUnit
    - source hpc-module-loads/eve.gfortran122
    # run cmake with testing support, build mhm and run pfunit tests
    - cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -B build
    - cmake --build build --parallel
    - cmake --build build --target test

unittest-intel2023b-classic:
  when: always
  stage: code-analysis
  needs:
    - job: cmake-intel2023b-classic
  script:
    # we need pfUnit
    - source hpc-module-loads/eve.intel2023b-classic
    # run cmake with testing support, build mhm and run pfunit tests
    - cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON -B build
    - cmake --build build --parallel
    - cmake --build build --target test

valgrind-gfortran122:
  when: always
  stage: code-analysis
  needs:
    - job: cmake-gfortran122
      artifacts: true
  script:
    - source hpc-module-loads/eve.gfortran122
    - module load Mamba/23.3.1-1
    - source activate /global/apps/mhm_checks/mhm_env
    - valgrind --version
    - valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./mhm_debug
    # execute mem-use check
    - valgrind --tool=massif --stacks=yes --time-unit=i --massif-out-file=massif.out.0 ./mhm_debug
    - ms_print massif.out.0
  artifacts:
    paths:
    - massif.out.0

valgrind-intel2023b-classic:
  when: always
  stage: code-analysis
  needs:
    - job: cmake-intel2023b-classic
      artifacts: true
  script:
    - source hpc-module-loads/eve.intel2023b-classic
    - module load Mamba/23.3.1-1
    - source activate /global/apps/mhm_checks/mhm_env
    - valgrind --version
    - valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./mhm_debug
    # execute mem-use check
    - valgrind --tool=massif --stacks=yes --time-unit=i --massif-out-file=massif.out.0 ./mhm_debug
    - ms_print massif.out.0
  artifacts:
    paths:
    - massif.out.0

coverage:
  when: always
  stage: code-analysis
  needs: []
  script:
    # gcov is part of GCC
    - source hpc-module-loads/eve.chs-conda02
    # run cmake with coverage support and run tests
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_WITH_COVERAGE=ON -B build
    - cmake --build build --parallel
    - cmake --build build --target mhm_coverage_CI
    # copy the output to a top-level folder
    - mkdir coverage
    - cp build/mhm_coverage_CI/* coverage -R
    - lcov_cobertura build/mhm_coverage_CI.info
  coverage: '/lines[\.]+\: (\d+\.\d+)\%/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
    - coverage

documentation:
  when: always
  stage: doc
  needs: []
  script:
    - source hpc-module-loads/eve.chs-conda02
    - module load GCC/12.2.0 texlive/20230904
    # use doxygen from the chs conda environment
    - export PROJECT_NUMBER="$(cat version.txt)"
    - sed -i '/GENERATE_LATEX.*=/s/^.*$/GENERATE_LATEX = NO/' doc/doxygen.config
    - doxygen doc/doxygen.config > doxygen_log_dev_html.txt 2>&1
    # create pdf documentation (no files and namespaces there)
    - sed -i '/GENERATE_HTML.*=/s/^.*$/GENERATE_HTML = NO/' doc/doxygen.config
    - sed -i '/GENERATE_LATEX.*=/s/^.*$/GENERATE_LATEX = YES/' doc/doxygen.config
    - sed -i '/SHOW_FILES.*=/s/^.*$/SHOW_FILES = NO/' doc/doxygen.config
    - sed -i '/SHOW_NAMESPACES.*=/s/^.*$/SHOW_NAMESPACES = NO/' doc/doxygen.config
    - sed -i '/ALPHABETICAL_INDEX.*=/s/^.*$/ALPHABETICAL_INDEX = NO/' doc/doxygen.config
    - doxygen doc/doxygen.config > doxygen_log_dev_latex.txt 2>&1
    - cd latex/ && make -j > ../doxygen_latex_dev.txt 2>&1
    - cp refman.pdf ../html/mhm_doc.pdf
    - cp refman.pdf ../mhm_doc_dev.pdf
    - cd .. && mv html html_dev
    - mv doxygen_warn.txt doxygen_warn_dev.txt
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - html_dev
      - mhm_doc_dev.pdf
      - doxygen_log_dev*.txt
      - doxygen_latex_dev.txt
      - doxygen_warn_dev.txt

documentation_stable:
  when: always
  only:
    - develop
  stage: doc
  needs: []
  variables:
    GIT_DEPTH: 0  # to have all tags
  script:
    - source hpc-module-loads/eve.chs-conda02
    # doc for latest version tag
    - git checkout $(git describe --match "v*" --abbrev=0 --tags $(git rev-list --tags --max-count=1))
    - module load GCC/12.2.0 texlive/20230904
    # use doxygen from the chs conda environment
    - export PROJECT_NUMBER="$(cat version.txt)"
    - sed -i '/GENERATE_LATEX.*=/s/^.*$/GENERATE_LATEX = NO/' doc/doxygen.config
    - doxygen doc/doxygen.config > doxygen_log_tag_html.txt 2>&1
    # create pdf documentation (no files and namespaces there)
    - sed -i '/GENERATE_HTML.*=/s/^.*$/GENERATE_HTML = NO/' doc/doxygen.config
    - sed -i '/GENERATE_LATEX.*=/s/^.*$/GENERATE_LATEX = YES/' doc/doxygen.config
    - sed -i '/SHOW_FILES.*=/s/^.*$/SHOW_FILES = NO/' doc/doxygen.config
    - sed -i '/SHOW_NAMESPACES.*=/s/^.*$/SHOW_NAMESPACES = NO/' doc/doxygen.config
    - sed -i '/ALPHABETICAL_INDEX.*=/s/^.*$/ALPHABETICAL_INDEX = NO/' doc/doxygen.config
    - doxygen doc/doxygen.config > doxygen_log_tag_latex.txt 2>&1
    - cd latex/ && make -j > ../doxygen_latex_tag.txt 2>&1
    - cp refman.pdf ../html/mhm_doc.pdf
    - cp refman.pdf ../mhm_doc_tag.pdf
    - cd .. && mv html html_tag
    - mv doxygen_warn.txt doxygen_warn_tag.txt
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - html_tag
      - mhm_doc_tag.pdf
      - doxygen_log_tag*.txt
      - doxygen_latex_tag.txt
      - doxygen_warn_tag.txt

pages:
  only:
    - develop
  stage: deploy
  dependencies:
    - documentation
    - documentation_stable
    - coverage
  script:
    # create public dir (remove if already present)
    - test -d public && rm -rf public
    - mkdir -p public
    # create the subdir
    - mkdir public/stable/
    - mkdir public/latest/
    # copy the doxygen generated html page to the public site
    - cp html_tag/* public/stable/ -R
    - cp html_dev/* public/latest/ -R
    # create an index.html that redirects to the master documentation (in master folder)
    - cp doc/html_files/index.html public/
    # create the coverage site
    - mkdir -p public/coverage
    - cp coverage/* public/coverage/ -R
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - public
